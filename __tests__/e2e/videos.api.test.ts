import request from 'supertest';import app from '../../src';import {HTTP_STATUSES} from "../../src/constants/httpStatuses";import {ROUTERS} from "../../src/constants/routers";import {VideoQualityEnum} from "../../src/constants/enum";import {REGEXPS} from "../../src/constants/regexps";import {CreateVideoModel, UpdateVideoModel} from "../../src/models";import {IVideosWithId} from "../../src/interfaces";import {createDateISO} from "../../src/utils/createDateISO";const getRequest = () => {    return request(app);};describe(ROUTERS.videos, () => {    let createdNewVideoResponseBody: IVideosWithId;    const correctRequestBodyCreateVideoExample: CreateVideoModel = {        "title": "Созданное видео",        "author": "Семён Семёныч",        "availableResolutions": [            VideoQualityEnum.P144,        ],    };    const correctRequestBodyUpdateVideoExample: UpdateVideoModel = {        "title": "Новый заголовок",        "author": "Новый автор",        "canBeDownloaded": true,        "minAgeRestriction": 18,        "publicationDate": createDateISO("2025-10-12T16:49:16.020Z"),        "availableResolutions": [            VideoQualityEnum.P144,            VideoQualityEnum.P240,            VideoQualityEnum.P360,            VideoQualityEnum.P480,        ],    };    const expectedResponseBodyCreatedVideoExample: IVideosWithId = {        "id": expect.any(Number),        "title": "Созданное видео",        "author": "Семён Семёныч",        "canBeDownloaded": false,        "minAgeRestriction": null,        "createdAt": expect.stringMatching(REGEXPS.date_ISO),        "publicationDate": expect.stringMatching(REGEXPS.date_ISO),        "availableResolutions": [            VideoQualityEnum.P144,        ],    };    const expectedResponseBodyUpdatedVideoExample: IVideosWithId = {        "id": expect.any(Number),        "title": "Новый заголовок",        "author": "Новый автор",        "canBeDownloaded": true,        "minAgeRestriction": 18,        "createdAt": expect.stringMatching(REGEXPS.date_ISO),        "publicationDate": createDateISO("2025-10-12T16:49:16.020Z"),        "availableResolutions": [            VideoQualityEnum.P144,            VideoQualityEnum.P240,            VideoQualityEnum.P360,            VideoQualityEnum.P480,        ],    };    beforeAll(async () => {        await getRequest()            .delete(`${ROUTERS.testing}/all-data`)            .expect(HTTP_STATUSES.NO_CONTENT);    });    it(`Should return ${HTTP_STATUSES.OK} code and empty array`, async () => {        await getRequest()            .get(ROUTERS.videos)            .expect(HTTP_STATUSES.OK, []);    });    it(`Should return ${HTTP_STATUSES.BAD_REQUEST} code and not create a video`, async () => {        const createResponse = await getRequest()            .post(ROUTERS.videos)            .send({                title: 'X'.repeat(50),                author: 'X'.repeat(30),                availableResolutions: [],            })            .expect(HTTP_STATUSES.BAD_REQUEST);        expect(createResponse.body.errorsMessages).toHaveLength(3);        const getResponse = await getRequest()            .get(ROUTERS.videos)            .expect(HTTP_STATUSES.OK);        expect(getResponse.body).toEqual([]);    });    it(`Should return ${HTTP_STATUSES.CREATED} code and the newly created video with correctly data`, async () => {        const createResponse = await getRequest()            .post(ROUTERS.videos)            .send(correctRequestBodyCreateVideoExample)            .expect(HTTP_STATUSES.CREATED);        createdNewVideoResponseBody = createResponse.body;        expect(createdNewVideoResponseBody).toEqual(expectedResponseBodyCreatedVideoExample);        const getResponse = await getRequest()            .get(ROUTERS.videos)            .expect(HTTP_STATUSES.OK);        expect(getResponse.body).toEqual([expectedResponseBodyCreatedVideoExample]);    });    it(`Should return ${HTTP_STATUSES.OK} code and video by sent id`, async () => {        const getResponse = await getRequest()            .get(`${ROUTERS.videos}/${createdNewVideoResponseBody.id}`)            .expect(HTTP_STATUSES.OK);        expect(getResponse.body).toEqual(createdNewVideoResponseBody);    });    it(`Should return ${HTTP_STATUSES.NOT_FOUND} code for non-existent updated video`, async () => {        await getRequest()            .get(`${ROUTERS.videos}/-100`)            .expect(HTTP_STATUSES.NOT_FOUND);    });    it(`Should return ${HTTP_STATUSES.BAD_REQUEST} code and not update a video`, async () => {        const updateResponse = await getRequest()            .put(`${ROUTERS.videos}/${createdNewVideoResponseBody.id}`)            .send({                ...correctRequestBodyUpdateVideoExample,                canBeDownloaded: 'X',                minAgeRestriction: 99,                publicationDate: '19 апреля 1994'            })            .expect(HTTP_STATUSES.BAD_REQUEST);        expect(updateResponse.body.errorsMessages).toHaveLength(3);        const getResponse = await getRequest()            .get(ROUTERS.videos)            .expect(HTTP_STATUSES.OK);        expect(getResponse.body).toEqual([createdNewVideoResponseBody]);    });    it(`Should return ${HTTP_STATUSES.NO_CONTENT} code and correct updated video`, async () => {        await getRequest()            .put(`${ROUTERS.videos}/${createdNewVideoResponseBody.id}`)            .send(correctRequestBodyUpdateVideoExample)            .expect(HTTP_STATUSES.NO_CONTENT);        const getResponse = await getRequest()            .get(ROUTERS.videos)            .expect(HTTP_STATUSES.OK);        expect(getResponse.body).toEqual([expectedResponseBodyUpdatedVideoExample]);    });    it(`Should return ${HTTP_STATUSES.NOT_FOUND} code for non-existent deleted video`, async () => {        await getRequest()            .delete(`${ROUTERS.videos}/-100`)            .expect(HTTP_STATUSES.NOT_FOUND);    });    it(`Should return ${HTTP_STATUSES.NO_CONTENT} code and delete the video (return empty array)`, async () => {        await getRequest()            .delete(`${ROUTERS.videos}/${createdNewVideoResponseBody.id}`)            .expect(HTTP_STATUSES.NO_CONTENT);        const getResponse = await getRequest()            .get(ROUTERS.videos)            .expect(HTTP_STATUSES.OK);        expect(getResponse.body).toEqual([]);    });});
import {Request, Response, Router} from "express";import {HTTP_STATUSES} from "../constants/httpStatuses";import {    IDataBase,    IVideosWithId,    RequestWithBody,    RequestWithPathParams,    RequestWithPathParamsAndBody} from "../interfaces";import {CreateVideoModel, IdPathParamsModel, UpdateVideoModel} from "../models";import {createDateISO} from "../utils/createDateISO";import {validatesCreateVideo, validatesUpdateVideo} from "../validation";import {createErrorMessages} from "../utils/createErrorMessages";import {IErrorMessages, IValidationError} from "../interfaces/ValidationError";export const getVideosRouter = (db: IDataBase) => {    const router = Router({});    router.get('/', (_: Request, res: Response<IVideosWithId[]>) => {        res            .status(HTTP_STATUSES.OK)            .json(db.videos);    });    router.post('/', (req: RequestWithBody<CreateVideoModel>, res: Response<IVideosWithId | IErrorMessages>) => {        const errors: IValidationError[] = validatesCreateVideo(req.body);        if (errors.length > 0) {            res                .status(HTTP_STATUSES.BAD_REQUEST)                .send(createErrorMessages(errors));            return;        }        const dateNow = new Date();        const newVideo: IVideosWithId = {            id: dateNow.getTime(),            title: req.body.title,            author: req.body.author,            canBeDownloaded: false,            minAgeRestriction: null,            createdAt: createDateISO(dateNow.toISOString()),            publicationDate: createDateISO(new Date(dateNow.setDate(dateNow.getDate() + 1)).toISOString()),            availableResolutions: [...req.body.availableResolutions],        };        db.videos.push(newVideo);        res.status(HTTP_STATUSES.CREATED).json(newVideo);    });    router.get('/:id', (req: RequestWithPathParams<IdPathParamsModel>, res: Response<IVideosWithId>) => {        const videoById: IVideosWithId | undefined = db.videos.find((item: IVideosWithId) => item.id === +req.params.id);        if (!videoById) {            res.sendStatus(HTTP_STATUSES.NOT_FOUND);            return;        }        res            .status(HTTP_STATUSES.OK)            .json(videoById);    });    router.put('/:id', (req: RequestWithPathParamsAndBody<IdPathParamsModel, UpdateVideoModel>, res: Response) => {        const errors: IValidationError[] = validatesUpdateVideo(req.body);        if (errors.length > 0) {            res                .status(HTTP_STATUSES.BAD_REQUEST)                .send(createErrorMessages(errors));            return;        }        const indexUpdatedVideo: number = db.videos.findIndex((item: IVideosWithId) => item.id === +req.params.id);        if (indexUpdatedVideo < 0) {            res.sendStatus(HTTP_STATUSES.NOT_FOUND);            return;        }        db.videos[indexUpdatedVideo] = {            ...db.videos[indexUpdatedVideo],            ...req.body,        };        res.sendStatus(HTTP_STATUSES.NO_CONTENT);    });    router.delete('/:id', (req: RequestWithPathParams<IdPathParamsModel>, res: Response) => {        const indexDeletedVideo: number = db.videos.findIndex((item: IVideosWithId) => item.id === +req.params.id);        if (indexDeletedVideo < 0) {            res.sendStatus(HTTP_STATUSES.NOT_FOUND);            return;        }        const deletedVideo: IVideosWithId = db.videos[indexDeletedVideo];        db.videos = db.videos.filter((item: IVideosWithId) => item.id !== deletedVideo.id);        res.sendStatus(HTTP_STATUSES.NO_CONTENT);    });    return router;}
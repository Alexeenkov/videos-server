import {UpdateVideoModel} from "../models";import {IValidationError} from "../interfaces/ValidationError";import {REGEXPS} from "../constants/regexps";import {validatesCreateVideo} from "./validatesCreateVideo";export const validatesUpdateVideo = (data: UpdateVideoModel): IValidationError[] => {    const errors: IValidationError[] = validatesCreateVideo(data);    if (        !data.canBeDownloaded ||        typeof data.canBeDownloaded !== "boolean"    ) {        errors.push({            field: 'canBeDownloaded',            message: 'Invalid field value',        });    }    if (        typeof data.minAgeRestriction !== "number" &&        data.minAgeRestriction !== null    ) {        errors.push({            field: 'minAgeRestriction',            message: 'Invalid field value',        });    } else if (        data.minAgeRestriction !== null && (            isNaN(data.minAgeRestriction) ||            data.minAgeRestriction < 1 ||            data.minAgeRestriction > 18        )    ) {        errors.push({            field: 'minAgeRestriction',            message: 'Invalid field value',        });    }    if (        !data.publicationDate ||        typeof data.publicationDate !== "string" ||        !REGEXPS.date_ISO.test(data.publicationDate)    ) {        errors.push({            field: 'publicationDate',            message: 'Invalid publication date',        });    }    return errors;};